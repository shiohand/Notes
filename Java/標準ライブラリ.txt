/* lang
---------------------------------------- */
/* インターフェース */
CharSequense  charシーケンス
Appendable    charシーケンスと値を追加できるオブジェクト
Comparable<T> 全体順序付けを矯正
Iterable<T>   拡張forできる
Readable      文字列のソース
Cloneable     実装すればclone()を使える
AutoClosable  クローズするまではリソースを保持できる

/* クラス */
Boolean
Character

Number byte short int long float doubleに変換可能な数値のスーパークラス
  Byte
  Short
  Integer
  Long
  Float
  Double
  BigDecimal
  BigInteger

String
StringBuilder
StringBuffer

Class<T>

Enum<E extends Enum<E>>

Math


/* util
---------------------------------------- */
/* インターフェース */
Collection<E>
List<E>
EventListener

Comparator<T>
Iterator<E>
ListIterator<E>
Formattable
Enumration<E>

Map<K,V>
Map.Entry<K,V>
SortedMap<K,V>
NavigableMap<K,V>
Set<E>
SortedSet<E>
NavigableSet<K,V>

Queue<E>
Deque<E>

PrimitiveIterator<T,T_CONS>
PrimitiveIteratorOfInt
PrimitiveIteratorOfLong
PrimitiveIteratorOfDouble

/* クラス */
Collections

Arrays
ArrayList<E>
ArraySet<E>
ArrayDeque<E>

EnumMap<K extends Enum<K>,​V>
EnumSet<E extends Enum<E>>
HashMap<K,​V>
HashSet<E>
Hashtable<K,​V>
LinkedHashMap<K,​V>
LinkedHashSet<E>
LinkedList<E>
Formatter

Date
Locale

Dictionary<K,V>
EventListenerProxy<T extends EventListener>

AbstractCollection<E>
AbstractList<E>
AbstractMap<K,V>
AbstractSet<E>
AbstractQueue<E>
AbstractDeque<E>
AbstractSequentialList<E>


/* io
---------------------------------------- */
/* インターフェース */

/* クラス */

/* time
---------------------------------------- */
/* インターフェース */

/* クラス */

/* math
---------------------------------------- */
/* インターフェース */

/* クラス */

Integer / Long / Double / ...
String
Pattern / Matcher
LocalDateTime / OffsetDateTime / ZonedDateTime / ...
Period / Duration
Calendar / Duration
BufferedWriter / BufferedReader
ObjectInputStream / ObjectOutputStream
Math
BigInteger
Random
NumberFormat
Arrays
Files
HttpClient

/* ラッパークラス */

// メモリをくう、nullが入ってしまうなどのリスクとかあるので、必要な時だけ使う方がいいかな
Boolean Byte Character Double Float Integer Long Short

// オートボクシング(boxing unboxing)
Integer val = 10; // int -> Integer
int in = val;     // Integer -> int
//　メソッドを利用した明示的なボクシングの方が軽い
Integer val = Integer.valueOf(10);
int in = val.IntegerValue();

// parseXxxx
Integer.parseInt("100");      // int 100
Integer.parseInt("FF", 16);   // int 255
Double.parseDouble("1.2345"); // double 1.2345
// toStringなど
String.valueOf(100);       // String 100
Integer.toString(100);     // String 100
Double.toString(1.2345);   // String 1.2345
Integer.toString(255, 16); // String ff
Integer.toHexString(255);  // String ff